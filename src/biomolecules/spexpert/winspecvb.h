/****************************************************************************
**
** Namespace WinSpecVB generated by dumpcpp from type library
** winspecvb.tlb
**
****************************************************************************/

#ifndef QAX_DUMPCPP_WINSPECVB_H
#define QAX_DUMPCPP_WINSPECVB_H

// Define this symbol to __declspec(dllexport) or __declspec(dllimport)
#ifndef WINSPECVB_EXPORT
#define WINSPECVB_EXPORT
#endif

#include <qaxobject.h>
#include <qaxwidget.h>
#include <qdatetime.h>
#include <qpixmap.h>

struct IDispatch;


// Referenced namespace
namespace mscorlib {
    class _Type;
}


namespace WinSpecVB {

    enum DM_CMD {
        DM_CMD_DM_XDIMDET       = 1,
        DM_CMD_DM_YDIMDET       = 2,
        DM_CMD_DM_TIMINGMODE    = 3,
        DM_CMD_DM_EXPOSEC       = 4,
        DM_CMD_DM_DETTYPE       = 5,
        DM_CMD_DM_XDIM          = 6,
        DM_CMD_DM_YDIM          = 7,
        DM_CMD_DM_ASYNEN        = 8,
        DM_CMD_DM_DATATYPE      = 9,
        DM_CMD_DM_PIXELSIZE     = 10,
        DM_CMD_DM_MINBLK        = 11,
        DM_CMD_DM_NUMMINBLK     = 12,
        DM_CMD_DM_ADCRATE       = 13,
        DM_CMD_DM_ADCTYPE       = 14,
        DM_CMD_DM_ADCRESOLUTION = 15,
        DM_CMD_DM_ADCBITADJUST  = 16,
        DM_CMD_DM_GAIN          = 17,
        DM_CMD_DM_GEOMETRIC     = 18,
        DM_CMD_DM_CLEANS        = 19,
        DM_CMD_DM_NUMSKPPERCLN  = 20,
        DM_CMD_DM_FILEVERSION   = 21,
        DM_CMD_DM_SWVERSION     = 22,
        DM_CMD_DM_CONTROLLERTYPE= 23,
        DM_CMD_DM_NUMFRAMES     = 24,
        DM_CMD_DM_MAXINTENSITY  = 25,
        DM_CMD_DM_MININTENSITY  = 26,
        DM_CMD_DM_SHUTTERTYPE   = 27,
        DM_CMD_DM_SHUTTERCOMP   = 28,
        DM_CMD_DM_READOUTMODE   = 29,
        DM_CMD_DM_WINDOWSIZE    = 30,
        DM_CMD_DM_CLKSPD        = 31,
        DM_CMD_DM_KINTRIGMODE   = 32,
        DM_CMD_DM_CLKSPD_us     = 33,
        DM_CMD_DM_INTERFACETYPE = 34,
        DM_CMD_DM_NOT_IN_USE_0  = 35,
        DM_CMD_DM_NOT_IN_USE_1  = 36,
        DM_CMD_DM_NOT_IN_USE_2  = 37,
        DM_CMD_DM_NOT_IN_USE_3  = 38,
        DM_CMD_DM_NOT_IN_USE_4  = 39,
        DM_CMD_DM_NOT_IN_USE_5  = 40,
        DM_CMD_DM_COSMICAPPLIED = 41,
        DM_CMD_DM_COSMICTYPE    = 42,
        DM_CMD_DM_COSMICTHRESHOLD= 43,
        DM_CMD_DM_BLEMISHAPPLIED= 44,
        DM_CMD_DM_FLATFIELDAPPLIED= 45,
        DM_CMD_DM_BACKGROUNDAPPLIED= 46,
        DM_CMD_DM_ACCUMS        = 47,
        DM_CMD_DM_HWACCUMS      = 48,
        DM_CMD_DM_NOT_IN_USE_6  = 49,
        DM_CMD_DM_NOT_IN_USE_7  = 50,
        DM_CMD_DM_NOT_IN_USE_8  = 51,
        DM_CMD_DM_STORESYNC     = 52,
        DM_CMD_DM_SWMADE        = 53,
        DM_CMD_DM_FLATFIELDNAME = 54,
        DM_CMD_DM_BACKSUBNAME   = 55,
        DM_CMD_DM_XLABEL        = 56,
        DM_CMD_DM_YLABEL        = 57,
        DM_CMD_DM_DLABEL        = 58,
        DM_CMD_DM_FILEDATE      = 59,
        DM_CMD_DM_BLEMISHFILE   = 60,
        DM_CMD_DM_USERINFO      = 61,
        DM_CMD_DM_USERCOMMENT1  = 62,
        DM_CMD_DM_USERCOMMENT2  = 63,
        DM_CMD_DM_USERCOMMENT3  = 64,
        DM_CMD_DM_USERCOMMENT4  = 65,
        DM_CMD_DM_USERCOMMENT5  = 66,
        DM_CMD_DM_xCAL_OFFSET   = 67,
        DM_CMD_DM_xCAL_FACTOR   = 68,
        DM_CMD_DM_xCAL_CURR_UNIT= 69,
        DM_CMD_DM_xCAL_STRING   = 70,
        DM_CMD_DM_xCAL_VALID    = 71,
        DM_CMD_DM_xCAL_INPUT_UNIT= 72,
        DM_CMD_DM_xCAL_POLYNOM_UNIT= 73,
        DM_CMD_DM_xCAL_CALIB_COUNT= 74,
        DM_CMD_DM_xCAL_PXL_POS  = 75,
        DM_CMD_DM_xCAL_PXL_VAL  = 76,
        DM_CMD_DM_xCAL_POLYNOM_ORDER= 77,
        DM_CMD_DM_xCAL_COEFFS   = 78,
        DM_CMD_DM_xCAL_LASERLINE= 79,
        DM_CMD_DM_xCAL_FILE_LABEL= 80,
        DM_CMD_DM_NUMROI        = 81,
        DM_CMD_DM_ROI_STARTX    = 82,
        DM_CMD_DM_ROI_ENDX      = 83,
        DM_CMD_DM_ROI_GP_X      = 84,
        DM_CMD_DM_ROI_STARTY    = 85,
        DM_CMD_DM_ROI_ENDY      = 86,
        DM_CMD_DM_ROI_GP_Y      = 87,
        DM_CMD_DM_CONTROLLERNUM = 88,
        DM_CMD_DM_DEFAULTTYPE   = 89,
        DM_CMD_DM_FRAMECOUNT    = 90,
        DM_CMD_DM_LASTFRAMERDY  = 91,
        DM_CMD_DM_FRAMEINPROS   = 92,
        DM_CMD_DM_SCANCOUNT     = 93,
        DM_CMD_DM_TEMPFLAG      = 94,
        DM_CMD_DM_STOREFLAG     = 95,
        DM_CMD_DM_FRAMESIZE     = 96,
        DM_CMD_DM_ISDISPLAYED   = 97,
        DM_CMD_DM_INUSE         = 98,
        DM_CMD_DM_LASTVALUE     = 99,
        DM_CMD_DM_STOREFLAGSAVE = 100,
        DM_CMD_DM_YTFLAG        = 101,
        DM_CMD_DM_YT_AREAS_EQUS = 102,
        DM_CMD_DM_YT_POINTS_TAKEN= 103,
        DM_CMD_DM_FILENAME      = 104,
        DM_CMD_DM_FILETITLE     = 105,
        DM_CMD_DM_DOCTYPE       = 106,
        DM_CMD_DM_NUMEXPREPEATS = 107,
        DM_CMD_DM_NUMEXPACCUMS  = 108,
        DM_CMD_DM_UPDATEVIEWS   = 109,
        DM_CMD_DM_PULSEFILENAME = 110,
        DM_CMD_DM_PULSEREPWIDTH = 111,
        DM_CMD_DM_PULSEREPDELAY = 112,
        DM_CMD_DM_CONTROLLERVERSION= 113,
        DM_CMD_DM_LOGICOUTPUT   = 114,
        DM_CMD_DM_VIRTUALCHIPFLAG= 115,
        DM_CMD_DM_PULSERTYPE    = 116,
        DM_CMD_DM_AMPHICAPLOWNOISE= 117,
        DM_CMD_DM_VCHIPXDIM     = 118,
        DM_CMD_DM_VCHIPYDIM     = 119,
        DM_CMD_DM_PIMAXUSED     = 120,
        DM_CMD_DM_PIMAXMODE     = 121,
        DM_CMD_DM_SHUTTERCONTROL= 122,
        DM_CMD_DM_ABSORBLIVE    = 123,
        DM_CMD_DM_ABSORBMODE    = 124,
        DM_CMD_DM_ABSORBSTRIPNUM= 125,
        DM_CMD_DM_THRESHOLDMINLIVE= 126,
        DM_CMD_DM_THRESHOLDMAXLIVE= 127,
        DM_CMD_DM_SPECAUTOSPECTROMODE= 128,
        DM_CMD_DM_SPECGLUEFLAG  = 129,
        DM_CMD_DM_PULSERMODE    = 130,
        DM_CMD_DM_PULSERONCHIPACCUMS= 131,
        DM_CMD_DM_PULSERREPEATEXP= 132,
        DM_CMD_DM_PULSESEQINCMODE= 133,
        DM_CMD_DM_ADCOFFSET     = 134,
        DM_CMD_DM_ABSORBFILENAME= 135,
        DM_CMD_DM_NUMROISINEXPERIMENT= 136,
        DM_CMD_DM_SPECMIRRORLOCATION= 137,
        DM_CMD_DM_SPECSLITLOCATION= 138,
        DM_CMD_DM_SPECMIRRORPOS = 139,
        DM_CMD_DM_READOUTTIME   = 140,
        DM_CMD_DM_DETTEMPERATURE= 141,
        DM_CMD_DM_DELAYTIME     = 142,
        DM_CMD_DM_THRESHOLDMINVAL= 143,
        DM_CMD_DM_THRESHOLDMAXVAL= 144,
        DM_CMD_DM_SPECCENTERWLNM= 145,
        DM_CMD_DM_SPECGLUESTARTWLNM= 146,
        DM_CMD_DM_SPECGLUEENDWLNM= 147,
        DM_CMD_DM_SPECGLUEMINOVRLPNM= 148,
        DM_CMD_DM_SPECGLUEFINALRESNM= 149,
        DM_CMD_DM_PULSESEQSTARTWIDTH= 150,
        DM_CMD_DM_PULSESEQENDWIDTH= 151,
        DM_CMD_DM_PULSESEQSTARTDELAY= 152,
        DM_CMD_DM_PULSESEQENDDELAY= 153,
        DM_CMD_DM_SPECSLITPOS   = 154,
        DM_CMD_DM_AUTOCLEANSACTIVE= 155,
        DM_CMD_DM_USECONTCLEANSINST= 156,
        DM_CMD_DM_CUSTOMCHIPFLAG= 157,
        DM_CMD_DM_XPREPIXELS    = 158,
        DM_CMD_DM_XPOSTPIXELS   = 159,
        DM_CMD_DM_YPREPIXELS    = 160,
        DM_CMD_DM_YPOSTPIXELS   = 161,
        DM_CMD_DM_CUSTOMTIMINGFLAG= 162,
        DM_CMD_DM_CANDOVIRTUALCHIPFLAG= 163,
        DM_CMD_DM_PIMAXGAIN     = 164,
        DM_CMD_DM_PIMAX2NSBRDUSED= 165,
        DM_CMD_DM_TRIGGEREDMODEFLAG= 166,
        DM_CMD_DM_CONTINUOUSCLEANSFLAG= 167,
        DM_CMD_DM_EXTERNALTRIGGERFLAG= 168,
        DM_CMD_DM_EXPERIMENTTIMELOCAL= 169,
        DM_CMD_DM_EXPERIMENTTIMEUTC= 170,
        DM_CMD_DM_EXPOSUNITS    = 171,
        DM_CMD_DM_SPECSLITPOSUNITS= 172,
        DM_CMD_DM_SPECGROOVES   = 173,
        DM_CMD_DM_AVGAINUSED    = 174,
        DM_CMD_DM_AVGAIN        = 175,
        DM_CMD_DM_ANALOGGAIN    = 176,
        DM_CMD_DM_SPECTYPE      = 177,
        DM_CMD_DM_SPECMODEL     = 178,
        DM_CMD_DM_PULSEBURSTUSED= 179,
        DM_CMD_DM_PULSEBURSTCOUNT= 180,
        DM_CMD_DM_PULSEBURSTPERIOD= 181,
        DM_CMD_DM_PULSEBRACKETUSED= 182,
        DM_CMD_DM_PULSEBRACKETTYPE= 183,
        DM_CMD_DM_PULSETIMECONSTFAST= 184,
        DM_CMD_DM_PULSEAMPLITUDEFAST= 185,
        DM_CMD_DM_PULSETIMECONSTSLOW= 186,
        DM_CMD_DM_PULSEAMPLITUDESLOW= 187
    };

    enum EXP_CMD {
        EXP_CMD_EXP_ETACTUAL    = 1,
        EXP_CMD_EXP_SEQUENTS    = 2,
        EXP_CMD_EXP_ERROR       = 3,
        EXP_CMD_EXP_GETCAPS     = 4,
        EXP_CMD_EXP_GETPLSR     = 5,
        EXP_CMD_EXP_DETECTOR_BIT= 16,
        EXP_CMD_EXP_RUNNING_APP = 23,
        EXP_CMD_EXP_VIDEO_TYPE  = 24,
        EXP_CMD_EXP_CUSTOM_VIDEO_X= 25,
        EXP_CMD_EXP_CUSTOM_VIDEO_Y= 26,
        EXP_CMD_EXP_CUSTOM_VIDEO_FSTWIDTH= 27,
        EXP_CMD_EXP_CUSTOM_VIDEO_LSTWIDTH= 28,
        EXP_CMD_EXP_VIDEO_XDIM  = 29,
        EXP_CMD_EXP_VIDEO_YDIM  = 30,
        EXP_CMD_EXP_VIDEO_MAX_ZOOM= 31,
        EXP_CMD_EXP_VIDEO_HORZ_PAN= 32,
        EXP_CMD_EXP_VIDEO_VERT_PAN= 33,
        EXP_CMD_EXP_WORD_MULTIPLIER= 34,
        EXP_CMD_EXP_TARGET_ID   = 35,
        EXP_CMD_EXP_ADAPTER_ID  = 36,
        EXP_CMD_EXP_NUMADAPTORS = 37,
        EXP_CMD_EXP_FORCE_PP_INIT= 38,
        EXP_CMD_EXP_NOP_ADC     = 39,
        EXP_CMD_EXP_ACTUAL_TEMP = 40,
        EXP_CMD_EXP_FORCE_AUTOSTOP= 41,
        EXP_CMD_EXP_DEFAULT_VTCLK= 42,
        EXP_CMD_EXP_MIN_VTCLK   = 43,
        EXP_CMD_EXP_MAX_VTCLK   = 44,
        EXP_CMD_EXP_DEFAULT_HTCLK= 45,
        EXP_CMD_EXP_MIN_HTCLK   = 46,
        EXP_CMD_EXP_MAX_HTCLK   = 47,
        EXP_CMD_EXP_TIMING_STYLE= 48,
        EXP_CMD_EXP_HEADSELECT  = 49,
        EXP_CMD_EXP_HORZPHASE   = 50,
        EXP_CMD_EXP_VERTPHASE   = 51,
        EXP_CMD_EXP_SPECIAL_SPEED= 52,
        EXP_CMD_EXP_PRE_STRIPS  = 53,
        EXP_CMD_EXP_POST_STRIPS = 54,
        EXP_CMD_EXP_PRE_LINES   = 55,
        EXP_CMD_EXP_POST_LINES  = 56,
        EXP_CMD_EXP_ACTIVE_LINES= 57,
        EXP_CMD_EXP_ACTIVE_STRIPS= 58,
        EXP_CMD_EXP_XFER_EXTRA  = 59,
        EXP_CMD_EXP_MIN_BLOCK   = 60,
        EXP_CMD_EXP_NUM_MIN_BLOCK= 61,
        EXP_CMD_EXP_LOGIC_OUTPUT= 66,
        EXP_CMD_EXP_VIDEO_BLANK = 67,
        EXP_CMD_EXP_ZOOM_MODE_VIDEO= 68,
        EXP_CMD_EXP_LEVEL_SYNC  = 69,
        EXP_CMD_EXP_DISABLE_LASER= 70,
        EXP_CMD_EXP_ACQBACK_SHUTTER= 71,
        EXP_CMD_EXP_ACQFLAT_SHUTTER= 72,
        EXP_CMD_EXP_SMALL_CCD_MINEXP= 73,
        EXP_CMD_EXP_LARGE_CCD_MINEXP= 74,
        EXP_CMD_EXP_GATING_MODE = 75,
        EXP_CMD_EXP_ILME_B1X    = 76,
        EXP_CMD_EXP_ILME_B2X    = 77,
        EXP_CMD_EXP_ILME_D1X    = 78,
        EXP_CMD_EXP_ILME_D2X    = 79,
        EXP_CMD_EXP_ILME_D4X    = 80,
        EXP_CMD_EXP_INIT_HW_ACCUM= 81,
        EXP_CMD_EXP_5X_GAIN_ENABLE= 82,
        EXP_CMD_EXP_RET_SRCCMP  = 83,
        EXP_CMD_EXP_EVENT_HANDLE= 84,
        EXP_CMD_EXP_READOUT_MODE= 85,
        EXP_CMD_EXP_SHUTTER_TYPE= 86,
        EXP_CMD_EXP_USER_DEFINED_CHIP= 87,
        EXP_CMD_EXP_USER_DEFINED_TIMING= 88,
        EXP_CMD_EXP_CONTROLLER_VERSION= 89,
        EXP_CMD_EXP_GET_CONTROLLER_VER= 90,
        EXP_CMD_EXP_TTL_LINES   = 91,
        EXP_CMD_EXP_BIT_ADJUST  = 92,
        EXP_CMD_EXP_RESOLUTION  = 93,
        EXP_CMD_EXP_GAIN        = 94,
        EXP_CMD_EXP_ADC_RATE    = 95,
        EXP_CMD_EXP_ADC_TYPE    = 96,
        EXP_CMD_EXP_NUMBER_OF_CLEANS= 97,
        EXP_CMD_EXP_NUM_OF_STRIPS_PER_CLN= 98,
        EXP_CMD_EXP_INTERFACE_CARD= 99,
        EXP_CMD_EXP_INTERRUPT   = 100,
        EXP_CMD_EXP_IO_ADDRESS1 = 101,
        EXP_CMD_EXP_IO_ADDRESS2 = 102,
        EXP_CMD_EXP_IO_ADDRESS3 = 103,
        EXP_CMD_EXP_HW_ROI      = 104,
        EXP_CMD_EXP_HW_BINNING  = 105,
        EXP_CMD_EXP_EDGE_TRIGGER= 106,
        EXP_CMD_EXP_SHUTTER_CONTROL= 107,
        EXP_CMD_EXP_RS170       = 108,
        EXP_CMD_EXP_RS170_COMPLEX= 109,
        EXP_CMD_EXP_HW_RS170_LUT= 110,
        EXP_CMD_EXP_RS170_INTENSITY_SCALING= 111,
        EXP_CMD_EXP_RS170_OFFSET= 112,
        EXP_CMD_EXP_RS170_PAN   = 113,
        EXP_CMD_EXP_RS170_ZOOM2X= 114,
        EXP_CMD_EXP_RS170_ZOOM4X= 115,
        EXP_CMD_EXP_RS170_BINNING= 116,
        EXP_CMD_EXP_RS170_DECIMATION= 117,
        EXP_CMD_EXP_HW_ACCUM    = 118,
        EXP_CMD_EXP_SHT_PREOPEN = 119,
        EXP_CMD_EXP_STORE_STROBE= 120,
        EXP_CMD_EXP_CONT_CLNS   = 121,
        EXP_CMD_EXP_TIMING_MODE = 122,
        EXP_CMD_EXP_EXT_TRIGGER = 123,
        EXP_CMD_EXP_EVENT_COUNTER= 124,
        EXP_CMD_EXP_SW_TRIGGER  = 125,
        EXP_CMD_EXP_KINETICS_WINDOWSIZE= 126,
        EXP_CMD_EXP_EXPOSURE    = 127,
        EXP_CMD_EXP_CONTROLLER_NAME= 128,
        EXP_CMD_EXP_CCD_CHIP_NAME= 129,
        EXP_CMD_EXP_BSWBINNING  = 297,
        EXP_CMD_EXP_EDGEENHANCE = 130,
        EXP_CMD_EXP_BOXVIDEOGAIN= 131,
        EXP_CMD_EXP_HSHADING_VALUE= 132,
        EXP_CMD_EXP_VSHADING_VALUE= 133,
        EXP_CMD_EXP_EDGEENHANCE_FLAG= 134,
        EXP_CMD_EXP_SHADING_FLAG= 135,
        EXP_CMD_EXP_GRAYSCALE   = 136,
        EXP_CMD_EXP_OFFSET      = 137,
        EXP_CMD_EXP_CCDGAIN     = 138,
        EXP_CMD_EXP_TEMPERATURE = 139,
        EXP_CMD_EXP_MCPVOLTAGE  = 140,
        EXP_CMD_EXP_BOXEXPOSURE = 141,
        EXP_CMD_EXP_ABC_FLAG    = 142,
        EXP_CMD_EXP_GAMMA_FLAG  = 143,
        EXP_CMD_EXP_AUTOBLACK_FLAG= 144,
        EXP_CMD_EXP_AGC_FLAG    = 145,
        EXP_CMD_EXP_ODD_FIELD   = 146,
        EXP_CMD_EXP_FIELD_SELECT= 147,
        EXP_CMD_EXP_RESET       = 148,
        EXP_CMD_EXP_EXTERN_ENABLE= 149,
        EXP_CMD_EXP_CONTROLLERS_SUPPORTED= 150,
        EXP_CMD_EXP_VTCLK       = 151,
        EXP_CMD_EXP_HTCLK       = 152,
        EXP_CMD_EXP_GATE_VS_CW  = 153,
        EXP_CMD_EXP_COM_PORT    = 154,
        EXP_CMD_EXP_US_UNITS    = 156,
        EXP_CMD_EXP_MS_UNITS    = 157,
        EXP_CMD_EXP_SEC_UNITS   = 158,
        EXP_CMD_EXP_MIN_UNITS   = 159,
        EXP_CMD_EXP_HRS_UNITS   = 160,
        EXP_CMD_EXP_FRAME_UNITS = 161,
        EXP_CMD_EXP_SYNC_ASYNC  = 162,
        EXP_CMD_EXP_FOCUS_NFRAME= 163,
        EXP_CMD_EXP_TIMEOUT     = 164,
        EXP_CMD_EXP_TIMEOUT_DEFAULT= 165,
        EXP_CMD_EXP_HW_AUTOSTOP = 166,
        EXP_CMD_EXP_RS170_INTEN_OFFSET= 167,
        EXP_CMD_EXP_CONTROLLER_ALIVE= 168,
        EXP_CMD_EXP_FOCUS_TYPE  = 169,
        EXP_CMD_EXP_FOCUS_ZOOM  = 170,
        EXP_CMD_EXP_FOCUS_PAN   = 171,
        EXP_CMD_EXP_MULTI_TAP_ROI= 172,
        EXP_CMD_EXP_USE_INTERUPTS= 173,
        EXP_CMD_EXP_DATA_ACQ_STATE= 174,
        EXP_CMD_EXP_VERIFY_GOOD_VALUES= 175,
        EXP_CMD_EXP_WHITE_CLAMP = 176,
        EXP_CMD_EXP_BLACK_CLAMP = 177,
        EXP_CMD_EXP_DELAY_TIME  = 178,
        EXP_CMD_EXP_READOUT_TIME= 179,
        EXP_CMD_EXP_SW_DIAG     = 180,
        EXP_CMD_EXP_DIAG1       = 181,
        EXP_CMD_EXP_DIAG2       = 182,
        EXP_CMD_EXP_DIAG3       = 183,
        EXP_CMD_EXP_DIAG4       = 184,
        EXP_CMD_EXP_DIAG5       = 185,
        EXP_CMD_EXP_AorB_GROUP  = 186,
        EXP_CMD_EXP_ABSORBANCE_FLAG= 187,
        EXP_CMD_EXP_ABSORBANCE_METHOD= 188,
        EXP_CMD_EXP_ABSORBANCE_STRIPNUM= 189,
        EXP_CMD_EXP_DMASIZE_VIA_DRIVER= 190,
        EXP_CMD_EXP_DRIVERVERSION= 191,
        EXP_CMD_EXP_NUM_DEVICES = 192,
        EXP_CMD_EXP_ECPDMA_CHANNEL= 193,
        EXP_CMD_EXP_CUSTOM_SHUTTER= 194,
        EXP_CMD_EXP_ADC_OFFSET  = 195,
        EXP_CMD_EXP_CURRENT_READOUT_MODE= 196,
        EXP_CMD_EXP_BANK_ADD    = 197,
        EXP_CMD_EXP_LUT_BANK    = 198,
        EXP_CMD_EXP_SETUP_STATUS= 201,
        EXP_CMD_EXP_XY_GROUPING = 239,
        EXP_CMD_EXP_MESSAGES_FLAG= 240,
        EXP_CMD_EXP_TTL_LINE_TO_WAIT= 253,
        EXP_CMD_EXP_DATA_COLLECTION_MODE= 258,
        EXP_CMD_EXP_DATA_COLLECTION_TYPE= 262,
        EXP_CMD_EXP_SKIPFRAMES  = 274,
        EXP_CMD_EXP_CLR_INT_CNTR= 276,
        EXP_CMD_EXP_ENABLE_INT_CNTR= 277,
        EXP_CMD_EXP_INT_CNTR    = 278,
        EXP_CMD_EXP_INTERNAL_SYNC_SRC= 279,
        EXP_CMD_EXP_SW_EXTSYNC  = 280,
        EXP_CMD_EXP_PTG_PRESENT = 281,
        EXP_CMD_EXP_ELEC_SHT    = 282,
        EXP_CMD_EXP_BOARDS_WITH_NVRAM= 283,
        EXP_CMD_EXP_ANLGMASTER_ST143= 284,
        EXP_CMD_EXP_ANLGSLAVE_ST143= 285,
        EXP_CMD_EXP_DISPLAY_ST143= 286,
        EXP_CMD_EXP_INTRFACE_ST143= 287,
        EXP_CMD_EXP_SCANCONTROL_ST143= 288,
        EXP_CMD_EXP_NUMBERFRAMES_IRQ= 204,
        EXP_CMD_EXP_COOL_TYPE   = 214,
        EXP_CMD_EXP_HD_TYPE     = 215,
        EXP_CMD_EXP_INTENSIFER_GAIN= 216,
        EXP_CMD_EXP_SHT_GATE_MODE= 217,
        EXP_CMD_EXP_HD_CHECK    = 218,
        EXP_CMD_EXP_AMP_MODE    = 219,
        EXP_CMD_EXP_AMP_DIALOG  = 247,
        EXP_CMD_EXP_ANALOG_GAIN = 220,
        EXP_CMD_EXP_HW_FIXES    = 221,
        EXP_CMD_EXP_PCI_CARDS   = 222,
        EXP_CMD_EXP_NOT_REVERSE = 223,
        EXP_CMD_EXP_LOAD_NVRAM_DEFAULTS= 234,
        EXP_CMD_EXP_CNTR_BRD    = 235,
        EXP_CMD_EXP_XDIMHW      = 237,
        EXP_CMD_EXP_YDIMHW      = 238,
        EXP_CMD_EXP_SPECIAL_FAST_RDOUT= 254,
        EXP_CMD_EXP_SPCL_FAST_Y_DIM= 255,
        EXP_CMD_EXP_SPCL_FAST_X_DIM= 256,
        EXP_CMD_EXP_SPCL_FAST_Y_INDEX= 257,
        EXP_CMD_EXP_SHUTTER_COMP_TIME_MS= 266,
        EXP_CMD_EXP_NVRAM_AVAIL = 267,
        EXP_CMD_EXP_NUMBER_AGAIN_AVAIL= 269,
        EXP_CMD_EXP_SENSOR_TYPE = 270,
        EXP_CMD_EXP_EVENT_TYPE  = 292,
        EXP_CMD_EXP_ANTI_BLOOMING= 293,
        EXP_CMD_EXP_FAST_PULSE_ENABLE= 233,
        EXP_CMD_EXP_USE_HEADCALIB= 296,
        EXP_CMD_EXP_TEMP_STATUS = 301,
        EXP_CMD_EXP_MULTIPLE_READMODES_LIVE= 302,
        EXP_CMD_EXP_FIRST_ACQUIRE_FLAG= 303,
        EXP_CMD_EXP_ANTI_BLOOMING_CONTROL= 304,
        EXP_CMD_EXP_PRE_HORZ_DELAY= 305,
        EXP_CMD_EXP_NVRAM_TRIES = 306,
        EXP_CMD_EXP_XASCEND     = 307,
        EXP_CMD_EXP_YASCEND     = 308,
        EXP_CMD_EXP_ALT_TIMING  = 309,
        EXP_CMD_EXP_SHUTTER_PRE_COMP= 310,
        EXP_CMD_EXP_PVCAM_POSSIBLE= 311,
        EXP_CMD_EXP_ADC_IN_NVRAM= 312,
        EXP_CMD_EXP_PASSTHRU_MODE= 313,
        EXP_CMD_EXP_FIRMWAREVERSION= 314,
        EXP_CMD_EXP_IMMEDIATE_SHUTTER= 315,
        EXP_CMD_EXP_STAGE2_TEMP = 316,
        EXP_CMD_EXP_AVGAIN_ENABLED= 317,
        EXP_CMD_EXP_AVGAIN_SETPOINT= 318,
        EXP_CMD_EXP_AVGAIN      = 319,
        EXP_CMD_EXP_AVGAIN_CALIB_TEMP= 320,
        EXP_CMD_EXP_AVGAIN_CALIB_COEFF1= 321,
        EXP_CMD_EXP_AVGAIN_CALIB_COEFF2= 322,
        EXP_CMD_EXP_AVGAIN_CALIB_COEFF3= 323,
        EXP_CMD_EXP_AVGAIN_CALIB_COEFF4= 324,
        EXP_CMD_EXP_AVGAIN_CALIB_COEFF5= 325,
        EXP_CMD_EXP_FORCE_READOUT_MODE= 326,
        EXP_CMD_EXP_RESET_DATACOLLECTION= 327,
        EXP_CMD_EXP_ACTIVE_SUBFRAME= 328,
        EXP_CMD_EXP_PV_READOUT_PORT= 514,
        EXP_CMD_EXP_COOLING_FAN_CTRL= 339,
        EXP_CMD_EXP_SHTR_RES    = 343,
        EXP_CMD_EXP_PBC         = 351,
        EXP_CMD_EXP_PREEXP_CLEANS= 354,
        EXP_CMD_EXP_TTL_CTRL    = 355,
        EXP_CMD_EXP_PAR_SHIFT_INDEX= 547,
        EXP_CMD_EXP_LOGIC_OUTPUT_INVERT= 548,
        EXP_CMD_EXP_CLASSNAME   = 775,
        EXP_CMD_EXP_FLATFLDNAME = 776,
        EXP_CMD_EXP_DARKNAME    = 777,
        EXP_CMD_EXP_SETUPNAME   = 778,
        EXP_CMD_EXP_ACCESSNAME  = 779,
        EXP_CMD_EXP_DATFILENAME = 780,
        EXP_CMD_EXP_ABSORBFILENAME= 781,
        EXP_CMD_EXP_BLEMISHFILENAME= 782,
        EXP_CMD_EXP_COSMICFILENAME= 783,
        EXP_CMD_EXP_FILEINCBASENAME= 784,
        EXP_CMD_EXP_YTNAME      = 785,
        EXP_CMD_EXP_DEVNAME     = 786,
        EXP_CMD_EXP_USEROI      = 787,
        EXP_CMD_EXP_DOBLEMISH   = 788,
        EXP_CMD_EXP_DOABSORB    = 789,
        EXP_CMD_EXP_DOCOSMIC    = 790,
        EXP_CMD_EXP_COSMICSENS  = 791,
        EXP_CMD_EXP_ABSORBSTRIP = 792,
        EXP_CMD_EXP_DATATYPE    = 793,
        EXP_CMD_EXP_OVERWRITECONFIRM= 794,
        EXP_CMD_EXP_FILEINCENABLE= 795,
        EXP_CMD_EXP_FILEINCCOUNT= 796,
        EXP_CMD_EXP_RUNNING     = 797,
        EXP_CMD_EXP_SAVEROPT    = 798,
        EXP_CMD_EXP_TIME_UNITS  = 799,
        EXP_CMD_EXP_FILEACCESS  = 800,
        EXP_CMD_EXP_AUTOSAVE    = 801,
        EXP_CMD_EXP_NEWWINDOW   = 802,
        EXP_CMD_EXP_XDIM        = 803,
        EXP_CMD_EXP_YDIM        = 804,
        EXP_CMD_EXP_XDIMDET     = 805,
        EXP_CMD_EXP_YDIMDET     = 806,
        EXP_CMD_EXP_ROIMODE     = 807,
        EXP_CMD_EXP_NUMREPEATSEXP= 808,
        EXP_CMD_EXP_NUMACCUMSEXP= 809,
        EXP_CMD_EXP_THREADSTATE = 810,
        EXP_CMD_EXP_USEMINTHRESHOLDING= 811,
        EXP_CMD_EXP_MINTHRESHOLDVALUE= 812,
        EXP_CMD_EXP_USEMAXTHRESHOLDING= 813,
        EXP_CMD_EXP_MAXTHRESHOLDVALUE= 814,
        EXP_CMD_EXP_RUNNING_EXPERIMENT= 815,
        EXP_CMD_EXP_THRESHOLD_DEMAND_UPDATE= 816,
        EXP_CMD_EXP_ROICOUNT    = 817,
        EXP_CMD_EXP_ACCUMS      = 818,
        EXP_CMD_EXP_CACCUMS     = 819,
        EXP_CMD_EXP_CSEQUENTS   = 820,
        EXP_CMD_EXP_PHOTON_ESTIMATION_ENABLE= 821,
        EXP_CMD_EXP_PHOTON_MAXTIME= 822,
        EXP_CMD_EXP_PHOTON_MAXTIMEUNIT= 823,
        EXP_CMD_EXP_CUSTOMFILTER_ENABLE= 824,
        EXP_CMD_EXP_CUSTOMFILTER_SIZE= 825,
        EXP_CMD_EXP_LOOKUPTABLE_ENABLE= 826,
        EXP_CMD_EXP_BSHOWWINDOW = 827,
        EXP_CMD_EXP_BBACKSUBTRACT= 828,
        EXP_CMD_EXP_BDOFLATFIELD= 829,
        EXP_CMD_EXP_ASCIIOUTPUTFILE= 830,
        EXP_CMD_EXP_ASCIIOUTPUT_DELIMITER= 831,
        EXP_CMD_EXP_ASCIIOUTPUT_TERMINATOR= 832,
        EXP_CMD_EXP_FFTYPE      = 833,
        EXP_CMD_EXP_BGTYPE      = 834,
        EXP_CMD_EXP_COSGRASS    = 835,
        EXP_CMD_EXP_RUNASCONFIRM= 836,
        EXP_CMD_EXP_RUNASRUNACCESS= 837,
        EXP_CMD_EXP_DATAFILETYPE= 838,
        EXP_CMD_EXP_ROTATE      = 839,
        EXP_CMD_EXP_FLIP        = 840,
        EXP_CMD_EXP_REVERSE     = 841,
        EXP_CMD_EXP_SWBINNING   = 842,
        EXP_CMD_EXP_AUTOSTORE   = 843,
        EXP_CMD_EXP_XBINNED     = 844,
        EXP_CMD_EXP_YBINNED     = 845,
        EXP_CMD_EXP_NUMPATTERNS = 846,
        EXP_CMD_EXP_EXPERIMENTTIME= 847,
        EXP_CMD_EXP_ASYNCSEQUENTIALS= 848,
        EXP_CMD_EXP_SEQUENTIALS = 849,
        EXP_CMD_EXP_CSEQUENTIALS= 850,
        EXP_CMD_EXP_AUTOD       = 851,
        EXP_CMD_EXP_EXPOSURETIME= 852,
        EXP_CMD_EXP_EXPOSURETIME_UNITS= 853,
        EXP_CMD_EXP_ACQMODE     = 854,
        EXP_CMD_EXP_DMASIZE_PVCAM= 855,
        EXP_CMD_EXP_INITIALIZE  = 856,
        EXP_CMD_EXP_CELL_X_SIZE = 857,
        EXP_CMD_EXP_CELL_Y_SIZE = 858,
        EXP_CMD_EXP_X_GAP_SIZE  = 859,
        EXP_CMD_EXP_Y_GAP_SIZE  = 860
    };

    enum dataType {
        dataType_X_UNKNOWN      = 0,
        dataType_X_SHORT        = 1,
        dataType_X_LONG         = 2,
        dataType_X_FLOAT        = 3,
        dataType_X_DOUBLE       = 4,
        dataType_X_BYTE         = 5,
        dataType_X_UINT16       = 6,
        dataType_X_ULONG        = 7,
        dataType_X_LASTTYPE     = 8,
        dataType_X_ENUM         = 9,
        dataType_X_NODATATYPE   = 10,
        dataType_X_BOOL         = 11,
        dataType_X_CHAR_PTR     = 13
    };

    enum docType {
        docType_dt_NONE         = 0,
        docType_dt_SPE          = 1,
        docType_dt_TIFF         = 2,
        docType_dt_TIF8         = 3,
        docType_dt_ASCII        = 4,
        docType_dt_NUMTYPES     = 5
    };

// forward declarations
    enum EXP_CMD;
    enum dataType;
    enum docType;
    enum DM_CMD;
    enum EXP_CMD;
    enum dataType;
    enum docType;
    enum DM_CMD;

class WINSPECVB_EXPORT _WinSpecVB : public QAxObject
{
public:
    _WinSpecVB(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Method ActivateWindow
    */
    inline bool ActivateWindow();

    /*
    Method CloseAllWindows
    */
    inline void CloseAllWindows();

    /*
    Method CloseWindow
    */
    inline void CloseWindow();

    /*
    Method GetAccum
    */
    inline int GetAccum();

    /*
    Method GetAcqParams
    */
    inline void GetAcqParams(double& dblExpo, int& iAcc, int& iFrm);

    /*
    Method GetAcqParams_2
    */
    inline void GetAcqParams_2(double& dblExpo, int& iAcc);

    /*
    Method GetFilePath
    */
    inline void GetFilePath(QString& strFN);

    /*
    Method GetFrame
    */
    inline int GetFrame();

    /*
    Method GetLastFrame
    */
    inline QVariantList GetLastFrame(int& iFrm, int& iX, int& iY, bool& blStatus);

    /*
    Method GetSpectrum
    */
    inline QVariantList GetSpectrum(int& iFrm, int& iX, int& iY, bool& blStatus);

    /*
    Method GetWinSpecAcqParams
    */
    inline void GetWinSpecAcqParams(double& dblExpo, int& iAcc, int& iFrm);

    /*
    Method GetWinSpecAcqParams_2
    */
    inline void GetWinSpecAcqParams_2(double& dblExpo, int& iAcc);

    /*
    Method GetWinSpecFilePath
    */
    inline void GetWinSpecFilePath(QString& strFN);

    /*
    Method QuitWinSpec
    */
    inline bool QuitWinSpec();

    /*
    Method Running
    */
    inline bool Running();

    /*
    Method Save
    */
    inline bool Save();

    /*
    Method SaveAs
    */
    inline bool SaveAs(const QString& strFN);

    /*
    Method SetAcqParams
    */
    inline void SetAcqParams(double dblExpo, int iAcc, int iFrm);

    /*
    Method SetAcqParams_2
    */
    inline void SetAcqParams_2(double dblExpo, int iAcc);

    /*
    Method SetFilePath
    */
    inline void SetFilePath(const QString& strFN);

    /*
    Method SetWinSpecAcqParams
    */
    inline void SetWinSpecAcqParams(double dblExpo, int iAcc, int iFrm);

    /*
    Method SetWinSpecAcqParams_2
    */
    inline void SetWinSpecAcqParams_2(double dblExpo, int iAcc);

    /*
    Method SetWinSpecFilePath
    */
    inline void SetWinSpecFilePath(const QString& strFN);

    /*
    Method ShowWinSpecWin
    */
    inline bool ShowWinSpecWin();

    /*
    Method Start
    */
    inline bool Start();

    /*
    Method StartFocus
    */
    inline bool StartFocus();

    /*
    Method StartFocus_2
    */
    inline bool StartFocus_2(double dblExpo, int iAcc, const QString& strFN);

    /*
    Method Start_2
    */
    inline bool Start_2(double dblExpo, int iAcc, int iFrm, const QString& strFN);

    /*
    Method StopRunning
    */
    inline void StopRunning();

    /*
    Method WinSpecConnectionFailed
    */
    inline bool WinSpecConnectionFailed();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

// Actual coclasses
class WINSPECVB_EXPORT WinSpecVB : public QAxObject
{
public:
    WinSpecVB(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl("{d23922f2-36bd-401e-9dc3-db1924be7a2d}");
    }

    WinSpecVB(_WinSpecVB *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property ToString
    */
    inline QString ToString() const; //Returns the value of ToString

    /*
    Method ActivateWindow
    */
    inline bool ActivateWindow();

    /*
    Method CloseAllWindows
    */
    inline void CloseAllWindows();

    /*
    Method CloseWindow
    */
    inline void CloseWindow();

    /*
    Method Equals
    */
    inline bool Equals(const QVariant& obj);

    /*
    Method GetAccum
    */
    inline int GetAccum();

    /*
    Method GetAcqParams
    */
    inline void GetAcqParams(double& dblExpo, int& iAcc, int& iFrm);

    /*
    Method GetAcqParams_2
    */
    inline void GetAcqParams_2(double& dblExpo, int& iAcc);

    /*
    Method GetFilePath
    */
    inline void GetFilePath(QString& strFN);

    /*
    Method GetFrame
    */
    inline int GetFrame();

    /*
    Method GetHashCode
    */
    inline int GetHashCode();

    /*
    Method GetLastFrame
    */
    inline QVariantList GetLastFrame(int& iFrm, int& iX, int& iY, bool& blStatus);

    /*
    Method GetSpectrum
    */
    inline QVariantList GetSpectrum(int& iFrm, int& iX, int& iY, bool& blStatus);

    /*
    Method GetType
    */
    inline mscorlib::_Type* GetType();

    /*
    Method GetWinSpecAcqParams
    */
    inline void GetWinSpecAcqParams(double& dblExpo, int& iAcc, int& iFrm);

    /*
    Method GetWinSpecAcqParams_2
    */
    inline void GetWinSpecAcqParams_2(double& dblExpo, int& iAcc);

    /*
    Method GetWinSpecFilePath
    */
    inline void GetWinSpecFilePath(QString& strFN);

    /*
    Method QuitWinSpec
    */
    inline bool QuitWinSpec();

    /*
    Method Running
    */
    inline bool Running();

    /*
    Method Save
    */
    inline bool Save();

    /*
    Method SaveAs
    */
    inline bool SaveAs(const QString& strFN);

    /*
    Method SetAcqParams
    */
    inline void SetAcqParams(double dblExpo, int iAcc, int iFrm);

    /*
    Method SetAcqParams_2
    */
    inline void SetAcqParams_2(double dblExpo, int iAcc);

    /*
    Method SetFilePath
    */
    inline void SetFilePath(const QString& strFN);

    /*
    Method SetWinSpecAcqParams
    */
    inline void SetWinSpecAcqParams(double dblExpo, int iAcc, int iFrm);

    /*
    Method SetWinSpecAcqParams_2
    */
    inline void SetWinSpecAcqParams_2(double dblExpo, int iAcc);

    /*
    Method SetWinSpecFilePath
    */
    inline void SetWinSpecFilePath(const QString& strFN);

    /*
    Method ShowWinSpecWin
    */
    inline bool ShowWinSpecWin();

    /*
    Method Start
    */
    inline bool Start();

    /*
    Method StartFocus
    */
    inline bool StartFocus();

    /*
    Method StartFocus_2
    */
    inline bool StartFocus_2(double dblExpo, int iAcc, const QString& strFN);

    /*
    Method Start_2
    */
    inline bool Start_2(double dblExpo, int iAcc, int iFrm, const QString& strFN);

    /*
    Method StopRunning
    */
    inline void StopRunning();

    /*
    Method WinSpecConnectionFailed
    */
    inline bool WinSpecConnectionFailed();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

// member function implementation
#ifndef QAX_DUMPCPP_WINSPECVB_NOINLINES
inline QString WinSpecVB::ToString() const
{
    QVariant qax_result = property("ToString");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline bool WinSpecVB::ActivateWindow()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline void WinSpecVB::CloseAllWindows()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
}

inline void WinSpecVB::CloseWindow()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline bool WinSpecVB::Equals(const QVariant& obj)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&obj};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline int WinSpecVB::GetAccum()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline void WinSpecVB::GetAcqParams(double& dblExpo, int& iAcc, int& iFrm)
{
    void *_a[] = {0, (void*)&dblExpo, (void*)&iAcc, (void*)&iFrm};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
}

inline void WinSpecVB::GetAcqParams_2(double& dblExpo, int& iAcc)
{
    void *_a[] = {0, (void*)&dblExpo, (void*)&iAcc};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
}

inline void WinSpecVB::GetFilePath(QString& strFN)
{
    void *_a[] = {0, (void*)&strFN};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
}

inline int WinSpecVB::GetFrame()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
    return qax_result;
}

inline int WinSpecVB::GetHashCode()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
    return qax_result;
}

inline QVariantList WinSpecVB::GetLastFrame(int& iFrm, int& iX, int& iY, bool& blStatus)
{
    QVariantList qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&iFrm, (void*)&iX, (void*)&iY, (void*)&blStatus};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
    return qax_result;
}

inline QVariantList WinSpecVB::GetSpectrum(int& iFrm, int& iX, int& iY, bool& blStatus)
{
    QVariantList qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&iFrm, (void*)&iX, (void*)&iY, (void*)&blStatus};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
    return qax_result;
}

inline mscorlib::_Type* WinSpecVB::GetType()
{
    mscorlib::_Type* qax_result = 0;
#ifdef QAX_DUMPCPP_MSCORLIB_H
    qRegisterMetaType<mscorlib::_Type*>("mscorlib::_Type*", &qax_result);
    qRegisterMetaType<mscorlib::_Type>("mscorlib::_Type", qax_result);
#endif
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
    return qax_result;
}

inline void WinSpecVB::GetWinSpecAcqParams(double& dblExpo, int& iAcc, int& iFrm)
{
    void *_a[] = {0, (void*)&dblExpo, (void*)&iAcc, (void*)&iFrm};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
}

inline void WinSpecVB::GetWinSpecAcqParams_2(double& dblExpo, int& iAcc)
{
    void *_a[] = {0, (void*)&dblExpo, (void*)&iAcc};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
}

inline void WinSpecVB::GetWinSpecFilePath(QString& strFN)
{
    void *_a[] = {0, (void*)&strFN};
    qt_metacall(QMetaObject::InvokeMetaMethod, 23, _a);
}

inline bool WinSpecVB::QuitWinSpec()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 24, _a);
    return qax_result;
}

inline bool WinSpecVB::Running()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 25, _a);
    return qax_result;
}

inline bool WinSpecVB::Save()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 26, _a);
    return qax_result;
}

inline bool WinSpecVB::SaveAs(const QString& strFN)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&strFN};
    qt_metacall(QMetaObject::InvokeMetaMethod, 27, _a);
    return qax_result;
}

inline void WinSpecVB::SetAcqParams(double dblExpo, int iAcc, int iFrm)
{
    void *_a[] = {0, (void*)&dblExpo, (void*)&iAcc, (void*)&iFrm};
    qt_metacall(QMetaObject::InvokeMetaMethod, 28, _a);
}

inline void WinSpecVB::SetAcqParams_2(double dblExpo, int iAcc)
{
    void *_a[] = {0, (void*)&dblExpo, (void*)&iAcc};
    qt_metacall(QMetaObject::InvokeMetaMethod, 29, _a);
}

inline void WinSpecVB::SetFilePath(const QString& strFN)
{
    void *_a[] = {0, (void*)&strFN};
    qt_metacall(QMetaObject::InvokeMetaMethod, 30, _a);
}

inline void WinSpecVB::SetWinSpecAcqParams(double dblExpo, int iAcc, int iFrm)
{
    void *_a[] = {0, (void*)&dblExpo, (void*)&iAcc, (void*)&iFrm};
    qt_metacall(QMetaObject::InvokeMetaMethod, 31, _a);
}

inline void WinSpecVB::SetWinSpecAcqParams_2(double dblExpo, int iAcc)
{
    void *_a[] = {0, (void*)&dblExpo, (void*)&iAcc};
    qt_metacall(QMetaObject::InvokeMetaMethod, 32, _a);
}

inline void WinSpecVB::SetWinSpecFilePath(const QString& strFN)
{
    void *_a[] = {0, (void*)&strFN};
    qt_metacall(QMetaObject::InvokeMetaMethod, 33, _a);
}

inline bool WinSpecVB::ShowWinSpecWin()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 34, _a);
    return qax_result;
}

inline bool WinSpecVB::Start()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 35, _a);
    return qax_result;
}

inline bool WinSpecVB::StartFocus()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 36, _a);
    return qax_result;
}

inline bool WinSpecVB::StartFocus_2(double dblExpo, int iAcc, const QString& strFN)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dblExpo, (void*)&iAcc, (void*)&strFN};
    qt_metacall(QMetaObject::InvokeMetaMethod, 37, _a);
    return qax_result;
}

inline bool WinSpecVB::Start_2(double dblExpo, int iAcc, int iFrm, const QString& strFN)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dblExpo, (void*)&iAcc, (void*)&iFrm, (void*)&strFN};
    qt_metacall(QMetaObject::InvokeMetaMethod, 38, _a);
    return qax_result;
}

inline void WinSpecVB::StopRunning()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 39, _a);
}

inline bool WinSpecVB::WinSpecConnectionFailed()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 40, _a);
    return qax_result;
}


inline bool _WinSpecVB::ActivateWindow()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline void _WinSpecVB::CloseAllWindows()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
}

inline void _WinSpecVB::CloseWindow()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline int _WinSpecVB::GetAccum()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline void _WinSpecVB::GetAcqParams(double& dblExpo, int& iAcc, int& iFrm)
{
    void *_a[] = {0, (void*)&dblExpo, (void*)&iAcc, (void*)&iFrm};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
}

inline void _WinSpecVB::GetAcqParams_2(double& dblExpo, int& iAcc)
{
    void *_a[] = {0, (void*)&dblExpo, (void*)&iAcc};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
}

inline void _WinSpecVB::GetFilePath(QString& strFN)
{
    void *_a[] = {0, (void*)&strFN};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
}

inline int _WinSpecVB::GetFrame()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
    return qax_result;
}

inline QVariantList _WinSpecVB::GetLastFrame(int& iFrm, int& iX, int& iY, bool& blStatus)
{
    QVariantList qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&iFrm, (void*)&iX, (void*)&iY, (void*)&blStatus};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
    return qax_result;
}

inline QVariantList _WinSpecVB::GetSpectrum(int& iFrm, int& iX, int& iY, bool& blStatus)
{
    QVariantList qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&iFrm, (void*)&iX, (void*)&iY, (void*)&blStatus};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
    return qax_result;
}

inline void _WinSpecVB::GetWinSpecAcqParams(double& dblExpo, int& iAcc, int& iFrm)
{
    void *_a[] = {0, (void*)&dblExpo, (void*)&iAcc, (void*)&iFrm};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
}

inline void _WinSpecVB::GetWinSpecAcqParams_2(double& dblExpo, int& iAcc)
{
    void *_a[] = {0, (void*)&dblExpo, (void*)&iAcc};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
}

inline void _WinSpecVB::GetWinSpecFilePath(QString& strFN)
{
    void *_a[] = {0, (void*)&strFN};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
}

inline bool _WinSpecVB::QuitWinSpec()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
    return qax_result;
}

inline bool _WinSpecVB::Running()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
    return qax_result;
}

inline bool _WinSpecVB::Save()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 23, _a);
    return qax_result;
}

inline bool _WinSpecVB::SaveAs(const QString& strFN)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&strFN};
    qt_metacall(QMetaObject::InvokeMetaMethod, 24, _a);
    return qax_result;
}

inline void _WinSpecVB::SetAcqParams(double dblExpo, int iAcc, int iFrm)
{
    void *_a[] = {0, (void*)&dblExpo, (void*)&iAcc, (void*)&iFrm};
    qt_metacall(QMetaObject::InvokeMetaMethod, 25, _a);
}

inline void _WinSpecVB::SetAcqParams_2(double dblExpo, int iAcc)
{
    void *_a[] = {0, (void*)&dblExpo, (void*)&iAcc};
    qt_metacall(QMetaObject::InvokeMetaMethod, 26, _a);
}

inline void _WinSpecVB::SetFilePath(const QString& strFN)
{
    void *_a[] = {0, (void*)&strFN};
    qt_metacall(QMetaObject::InvokeMetaMethod, 27, _a);
}

inline void _WinSpecVB::SetWinSpecAcqParams(double dblExpo, int iAcc, int iFrm)
{
    void *_a[] = {0, (void*)&dblExpo, (void*)&iAcc, (void*)&iFrm};
    qt_metacall(QMetaObject::InvokeMetaMethod, 28, _a);
}

inline void _WinSpecVB::SetWinSpecAcqParams_2(double dblExpo, int iAcc)
{
    void *_a[] = {0, (void*)&dblExpo, (void*)&iAcc};
    qt_metacall(QMetaObject::InvokeMetaMethod, 29, _a);
}

inline void _WinSpecVB::SetWinSpecFilePath(const QString& strFN)
{
    void *_a[] = {0, (void*)&strFN};
    qt_metacall(QMetaObject::InvokeMetaMethod, 30, _a);
}

inline bool _WinSpecVB::ShowWinSpecWin()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 31, _a);
    return qax_result;
}

inline bool _WinSpecVB::Start()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 32, _a);
    return qax_result;
}

inline bool _WinSpecVB::StartFocus()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 33, _a);
    return qax_result;
}

inline bool _WinSpecVB::StartFocus_2(double dblExpo, int iAcc, const QString& strFN)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dblExpo, (void*)&iAcc, (void*)&strFN};
    qt_metacall(QMetaObject::InvokeMetaMethod, 34, _a);
    return qax_result;
}

inline bool _WinSpecVB::Start_2(double dblExpo, int iAcc, int iFrm, const QString& strFN)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dblExpo, (void*)&iAcc, (void*)&iFrm, (void*)&strFN};
    qt_metacall(QMetaObject::InvokeMetaMethod, 35, _a);
    return qax_result;
}

inline void _WinSpecVB::StopRunning()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 36, _a);
}

inline bool _WinSpecVB::WinSpecConnectionFailed()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 37, _a);
    return qax_result;
}



#endif

}

QT_BEGIN_NAMESPACE

namespace QtMetaTypePrivate {
template<>
struct QMetaTypeFunctionHelper<WinSpecVB::WinSpecVB, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<WinSpecVB::WinSpecVB*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new WinSpecVB::WinSpecVB();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<WinSpecVB::WinSpecVB*>(t)->WinSpecVB::WinSpecVB::~WinSpecVB();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) WinSpecVB::WinSpecVB;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const WinSpecVB::WinSpecVB*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<WinSpecVB::WinSpecVB*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<WinSpecVB::_WinSpecVB, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<WinSpecVB::_WinSpecVB*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new WinSpecVB::_WinSpecVB();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<WinSpecVB::_WinSpecVB*>(t)->WinSpecVB::_WinSpecVB::~_WinSpecVB();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) WinSpecVB::_WinSpecVB;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const WinSpecVB::_WinSpecVB*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<WinSpecVB::_WinSpecVB*>(t); }
#endif // QT_NO_DATASTREAM
};

} // namespace QtMetaTypePrivate
QT_END_NAMESPACE

#endif

